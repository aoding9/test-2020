{
	// modules 引入
	"require module node": {
		"prefix": "require module node",
		"scope": "javascript",
		"body": [
			"const $2${1:modulename} = require('${1:modulename}');\n"
		],
		"description": "引入模块"
	},
	"bodyParser module node": {
		"prefix": "bodyParser module node",
		"scope": "javascript",
		"body": [
			"const bodyParser = require('body-parser');\n"
		],
		"description": "引入body-parser模块"
	},
	"serveStatic module node": {
		"prefix": "serveStatic module node",
		"scope": "javascript",
		"body": [
			"const serveStatic = require('serve-static');\n"
		],
		"description": "引入serveStatic静态资源服务模块"
	},
	"promisify util module node": {
		"prefix": "promisify util module node",
		"scope": "javascript",
		"body": [
			"const promisify = require('util').promisify;\n"
		],
		"description": "引入util.promisify 异步api包装，返回promise对象模块"
	},
	"util module node": {
		"prefix": "util module node",
		"scope": "javascript",
		"body": [
			"const util = require('util');\n"
		],
		"description": "util模块"
	},
	"express module node": {
		"prefix": "express module node",
		"scope": "javascript",
		"body": [
			"const express = require('express');\n"
		],
		"description": "引入express框架模块"
	},
	"mongoose module node": {
		"prefix": "mongoose module node",
		"scope": "javascript",
		"body": [
			"const mongoose = require('mongoose');\n"
		],
		"description": "mongoose 数据库模块"
	},
	"http module node": {
		"prefix": "http module node",
		"scope": "javascript",
		"body": [
			"const http = require('http');\n"
		],
		"description": "http 网站服务器模块"
	},
	"url module node": {
		"prefix": "url module node",
		"scope": "javascript",
		"body": [
			"const url = require('url');\n"
		],
		"description": "url url处理模块"
	},
	"fs module node": {
		"prefix": "fs module node",
		"scope": "javascript",
		"body": [
			"const fs = require('fs');\n"
		],
		"description": "fs 文件模块"
	},
	"path module node": {
		"prefix": "path module node",
		"scope": "javascript",
		"body": [
			"const path = require('path');\n"
		],
		"description": "path 路径处理模块"
	},
	"gulp module node": {
		"prefix": "gulp module node",
		"scope": "javascript",
		"body": [
			"const gulp = require('gulp');\n"
		],
		"description": "gulp 自动化项目重构模块"
	},
	"gulp fileInclude module node": {
		"prefix": "gulp fileinclude module node",
		"scope": "javascript",
		"body": [
			"const fileinclude = require('gulp-file-include');\n"
		],
		"description": "gulp-file-include 自动化公共代码包含模块"
	},
	"gulp htmlmin module node": {
		"prefix": "gulp htmlmin module node",
		"scope": "javascript",
		"body": [
			"const htmlmin = require('gulp-htmlmin');\n"
		],
		"description": "gulp-htmlmin html压缩模块"
	},
	"gulp less module node": {
		"prefix": "gulp less module node",
		"scope": "javascript",
		"body": [
			"const less = require('gulp-less');\n"
		],
		"description": "gulp-less 自动化less转css模块"
	},
	"gulp csso module node": {
		"prefix": "gulp csso module node",
		"scope": "javascript",
		"body": [
			"const csso = require('gulp-csso');\n"
		],
		"description": "gulp-csso 自动化css压缩模块"
	},
	"gulp babel module node": {
		"prefix": "gulp babel module node",
		"scope": "javascript",
		"body": [
			"const babel = require('gulp-babel');\n"
		],
		"description": "gulp-babel 自动化es6转es5模块"
	},
	"gulp uglify module node": {
		"prefix": "gulp uglify module node",
		"scope": "javascript",
		"body": [
			"const uglify = require('gulp-uglify');\n"
		],
		"description": "gulp-uglify 自动化js压缩模块"
	},
	"querystring module node": {
		"prefix": "querystring module node",
		"scope": "javascript",
		"body": [
			"const querystring = require('querystring');\n"
		],
		"description": "querystring查询字符串处理模块"
	},
	"mime module node": {
		"prefix": "mime module node",
		"scope": "javascript",
		"body": [
			"const querystring = require('querystring');\n"
		],
		"description": "mime类型处理模块"
	},
	"artTemplate module node": {
		"prefix": "artTemplate module node",
		"scope": "javascript",
		"body": [
			"const template = require('art-template');\n"
		],
		"description": "art-template模板引擎模块"
	},
	"dateformat module node": {
		"prefix": "dateformat module node",
		"scope": "javascript",
		"body": [
			"const dateFormat = require('dateformat');\n"
		],
		"description": "dateformat日期格式化模块"
	},
	"router module node": {
		"prefix": "router module node",
		"scope": "javascript",
		"body": [
			"const getRouter = require('router');\n",
		],
		"description": "dateformat日期格式化模块"
	},
	// http
	"createServer http node": {
		"prefix": "createServer http node",
		"scope": "javascript",
		"body": [
			"const ${1:app} = http.createServer();\n"
		],
		"description": "创建网站服务器实例对象"
	},
	"request http node": {
		"prefix": "request http node",
		"scope": "javascript",
		"body": [
			"${1:app}.on('request', (req, res) => {",
			"\t$2",
			"\tres.end(${3:'ok'});",
			"});\n"
		],
		"description": "服务器对象注册响应事件"
	},
	"listen http node": {
		"prefix": "listen http node",
		"scope": "javascript",
		"body": [
			"app.listen(${1:3000});",
			"console.log('网站服务器启动成功');\n"
		],
		"description": "服务器对象监听端口"
	},
	"writeHead200 http node": {
		"prefix": "writeHead200 http node",
		"scope": "javascript",
		"body": [
			"res.writeHead(200, {",
			"\t${1:'content-type': 'text/html;charset=utf8'},",
			"});",
			"res.end();\n"
		],
		"description": "报文头200响应"
	},
	"writeHead301 http node": {
		"prefix": "writeHead301 http node",
		"scope": "javascript",
		"body": [
			"res.writeHead(301, {",
			"\t${1:// Location: '/$2'},",
			"});",
			"res.end();\n"
		],
		"description": "报文头301响应"
	},
	"writeHead400 http node": {
		"prefix": "writeHead400 http node",
		"scope": "javascript",
		"body": [
			"res.writeHead(400, {",
			"\t${1:'content-type': 'text/html;charset=utf8'},",
			"});",
			"res.end('响应码：400');\n"
		],
		"description": "报文头400响应"
	},
	"postParams http node": {
		"prefix": "postParams http node",
		"scope": "javascript",
		"body": [
			"let postParams = '';",
   		"req.on('data', param => {",
      "\tpostParams += param;",
   		"});",
   		"req.on('end', () => {",
      "\t${1:const objParams = querystring.parse(postParams)}",
   		"});\n"
		],
		"description": "接收并拼接post参数"
	},
	"method http node": {
		"prefix": "method http node",
		"scope": "javascript",
		"body": [
			"if(req.method =='POST'){",
			"\t${1:res.end('is post')}",
			"}else if(req.method =='GET'){",
			"\t${2:res.end('is get')}",
			"} else {",
			"\t${3:res.end('not post or get')};",
			"}\n"
		],
		"description": "请求方式判断"
	},
	

	// fs
	"readFile fs node": {
		"prefix": "readFile fs node",
		"scope": "",
		"body": [
			"fs.readFile('${1:路径/文件名}', 'utf-8',(err, doc) => {",
			"\tif (err != null) {",
			"\t\tnext(err)",
			"\t} else {",
			"\t\tres.send(doc);",
			"\t}",
			"});\n"
		],
		"description": "读取文件"
	},
	"writeFile fs node": {
		"prefix": "writeFile fs node",
		"scope": "javascript",
		"body": [
			"fs.writeFile('${1:路径/文件名}', ${2:文件内容}, err => {",
			"\tif (err != null) {",
			"\t\tnext(err)",
			"\t} else {",
			"\t\tconsole.log('写入成功');",
			"\t}",
			"});\n"
		],
		"description": "写入文件"
	},
	// url
	"parse url node": {
		"prefix": "parse url node",
		"scope": "javascript",
		"body": [
			"let {query, pathname} = url.parse(req.url, true);",
		],
		"description": "获取url的query对象和请求路径"
	},
	//path
	"join path node": {
		"prefix": "join path node",
		"scope": "javascript",
		"body": [
			"let finalPath = path.join(${1:__dirname}, ${2:'public'}, ${3:pathname});\n",
		],
		"description": "路径拼接"
	},
	// mime
	"getType mime node": {
		"prefix": "getType mime node",
		"scope": "javascript",
		"body": [
		  "let type = mime.getType(realPath);\n"
		],
		"description": "获取文件类型"
	},
	// gulp
	"gulp htmlmin task node": {
		"prefix": "gulp htmlmin task node",
		"scope": "javascript",
		"body": [
			"const fileinclude = require('gulp-file-include');",
			"const htmlmin = require('gulp-htmlmin');",
			"gulp.task('htmlmin', done => {",
			"gulp.src(${1:'./src/*.html'})",
			"\t\t.pipe(fileinclude())",
			"\t\t.pipe(htmlmin({",
			"\t\t\tcollapseWhitespace: true",
			"\t\t}))",
			"\t\t.pipe(gulp.dest('${2:dist}'));",
			"\tdone();",
		"});\n"
		],
		"description": "gulp-htmlmin task"
	},
	"gulp cssmin task node": {
		"prefix": "gulp cssmin task node",
		"scope": "javascript",
		"body": [
			"const less = require('gulp-less');",
			"const csso = require('gulp-csso');",
			"gulp.task('cssmin', done => {",
			"gulp.src([${1:'./src/css/*.less'}, ${2:'./src/css/*.css'}])",
			"\t\t.pipe(less())",
			"\t\t.pipe(csso())",
			"\t\t.pipe(gulp.dest('${2:dist/css}'));",
			"\tdone();",
		"});\n"
		],
		"description": "gulp-cssmin task"
	},
	"gulp jsmin task node": {
		"prefix": "gulp jsmin task node",
		"scope": "javascript",
		"body": [
			"const babel = require('gulp-babel');",
			"const uglify = require('gulp-uglify');",
			"gulp.task('jsmin', done => {",
			"gulp.src(${1:'./src/js/*.js'})",
			"\t.pipe(babel({",
			"\t\tpresets: ['@babel/env']",
			"\t}))",
			"\t.pipe(uglify())",
			"\t.pipe(gulp.dest('${2:dist/js}'));",
			"\tdone();",
		"});\n"
		],
		"description": "gulp-jsmin task"
	},
	"gulp copy task node": {
		"prefix": "gulp copy node",
		"scope": "javascript",
		"body": [
			"gulp.task('copy', done => {",
			"gulp.src('./src/images/**/*').pipe(gulp.dest('dist/images'));",
			"gulp.src('./src/${1:需要复制的目录名}/**/*').pipe(gulp.dest('dist/${1:需要复制的目录名}'));",
			"\tdone();",
		"});\n"
		],
		"description": "gulp copy task"
	},
	"gulp default task node": {
		"prefix": "gulp default task node",
		"scope": "javascript",
		"body": [
			"gulp.task('default',gulp.series(['htmlmin','cssmin','jsmin','copy']));\n",
		],
		"description": "gulp default task"
	},
	// mongoose
	"connect mongoose node": {
		"prefix": "connect mongoose node",
		"scope": "javascript",
		"body": [
			"mongoose.connect('mongodb://${1:localhost:27017/playground}' ,{",
			"\tuseNewUrlParser: true,",
			"\tuseUnifiedTopology: true",
			"})",
			"\t.then(() => console.log('数据库连接成功'))",
			"\t.catch(err => console.log(err, '数据库连接失败'));\n",
		],
		"description": "连接数据库"
	},

	"then mongoose node": {
		"prefix": "then mongoose node",
		"scope": "javascript",
		"body": [
			".then(doc => ${1:console.log(doc)})\n"
		],
		"description": "数据库连接正确的处理"
	},
	"catch mongoose node": {
		"prefix": "catch mongoose node",
		"scope": "javascript",
		"body": [
			".catch(err => {",
			"\tconst errors = err.errors;",
			"\tfor( let item in errors) {",
			"\t\tres.end(errors[item]['message']);",
			"\t}",
			"});\n"
		],
		"description": "数据库连接错误的处理"
	},

	"schema mongoose node": {
		"prefix": "schema mongoose node",
		"scope": "javascript",
		"body": [
			"const ${1:my}Schema = new mongoose.Schema({",
			"\t${2:key1}: {",
			"\t\ttype: ${3:String},",
			"\t},",
			"\t${4:key2}: {",
			"\t\ttype: ${5:String},",
			"\t},",
			"});",
			"const ${6:ColName} = mongoose.model('${6:ColName}', ${1:my}Schema);",
			"${6:ColName}.create({",
			"\t${2:key1}: ${7:value},",
			"\t${4:key2}: ${8:value},",
			"})",
			"\t.then(doc => console.log(doc))",
			"\t.catch(err => console.log(err));\n",
		],
		"description": "创建数据库模型，并编译模型"
	},
	"validate schema mongoose node": {
		"prefix": "validate schema mongoose node",
		"scope": "javascript",
		"body": [
			"validate: {",
			"\tvalidator: v => {",
			"\t\treturn ${1: 判断表达式  //true验证通过 false失败}",
			"\t},",
			"\tmessage: '${2:错误信息}'",
			"}\n",
		],
		"description": "schema模型数据自定义验证器"
	},
	// router
	"getRouter router node": {
		"prefix": "getRouter router node",
		"scope": "javascript",
		"body": [
			"const router = getRouter();",
		],
		"description": "初始化路由对象"
	},
	"get router node": {
		"prefix": "get router node",
		"scope": "javascript",
		"body": [
			"router.get('/$1', (req, res) => {",
			"\t${2:let html = '响应内容';}",
			"\t${3:res.end(${4:html});}",
			"})\n",
		],
		"description": "创建get路由响应"
	},
	"post router node": {
		"prefix": "post router node",
		"scope": "javascript",
		"body": [
			"router.post('/$1', (req, res) => {",
			"\t${2:let html = '响应内容';}",
			"\t${3:res.end(${4:html});}",
			"})\n",
		],
		"description": "创建post路由响应"
	},
	"on router node": {
		"prefix": "on router node",
		"scope": "javascript",
		"body": [
			"router(req, res, () => {})\n"
		],
		"description": "启用router对象"
	},
	// serve-static
	"serve serveStatic module node": {
		"prefix": "serve serveStatic node",
		"scope": "javascript",
		"body": [
			"const serve = serveStatic(path.join(${1:__dirname, 'public'}));\n"
		],
		"description": "初始化static服务，设置static路径"
	},
	"on serveStatic node": {
		"prefix": "on serveStatic module node",
		"scope": "javascript",
		"body": [
			"serve(req, res, () => {})\n"
		],
		"description": "启用static服务"
	},
	// art template模板引擎
	"root defaults template node": {
		"prefix": "root defaults template node",
		"scope": "javascript",
		"body": [
			"template.defaults.root = path.join(${1:__dirname, 'views'});",
			"template.defaults.extname = '.art';\n"
		],
		"description": "配置模板views路径和模板后缀名"
	},
	"imports defaults template node": {
		"prefix": "imports defaults template node",
		"scope": "javascript",
		"body": [
			"template.defaults.imports.${1:varName} = ${1:varName};\n"
		],
		"description": "模板变量导入"
	},
	"dataRender template node": {
		"prefix": "dataRender template node",
		"scope": "javascript",
		"body": [
			"const content = template('${1:模板名}', {",
			"\t${2:data: 'value'}",
			"});\n",
		],
		"description": "调用template()对模板渲染 数据呈现"
	},
	// express
	"easy express node": {
		"prefix": "easy express node",
		"scope": "javascript",
		"body": [
			"const express = require('express');",
			"const app = express();\n",
			"app$1.${2:get}('/$3', (req, res, next) => {${4:res.send('ok')}})\n\n",
			"app.listen(3000);",
			"console.log('网站服务器启动成功');\n",
		],
		"description": "简单的express模板"
	},
	"createServer express node": {
		"prefix": "createServer  express node",
		"scope": "javascript",
		"body": [
			"const ${1:app} = express();\n",
		],
		"description": "调用express()创建web服务器"
	},
	"send express node": {
		"prefix": "send express node",
		"scope": "javascript",
		"body": [
			"res.send($1);\n",
		],
		"description": "res.send()"
	},
	"get express node": {
		"prefix": "get express node",
		"scope": "javascript",
		"body": [
			"${1:app}.get('/$2', ${3:async }(req, res${4:, next}) => {",
			"\t$6",
			"\t${5:next()}",
			"})\n",
		],
		"description": "express get 中间件"
	},
	"post express node": {
		"prefix": "post express node",
		"scope": "javascript",
		"body": [
			"${1:app}.post('/$2', ${3:async }(req, res${4:, next}) => {",
			"\t$6",
			"\t${5:next()}",
			"})\n",
		],
		"description": "express post 中间件"
	},
	"use express node": {
		"prefix": "use express node",
		"scope": "javascript",
		"body": [
			"${1:app}.use(${2:'/$3'}, $4);\n",
		],
		"description": "express use 中间件"
	},
	"easy use express node": {
		"prefix": "easy use express node",
		"scope": "javascript",
		"body": [
			"${1:app}.use(${2:'/$3'}, ${4:async }(req, res, next) => {",
			"\t$6",
			"\t${5:next()}",
			"})\n",
		],
		"description": "express use简单模板 中间件"
	},
	// express error 错误处理相关
	"use err express node": {
		"prefix": "use err express node",
		"scope": "javascript",
		"body": [
			"app.use((err, req, res, next) => {",
			"\tres.status(${3:500}).send(${4:err.message});",
			"})\n",
		],
		"description": "express use err 错误处理中间件"
	},
	"throw err express node": {
		"prefix": "throw err express node",
		"scope": "javascript",
		"body": [
			"throw new Error(${1:程序发生了未知错误});\n",
		],
		"description": "抛出错误"
	},
	"try catch express node": {
		"prefix": "try catch post express node",
		"scope": "javascript",
		"body": [
			"try {",
			"\tawait ${1:asyncApi}",
			"} catch (ex) {",
			"\t${2:next(ex);}",
			"}\n",
		],
		"description": "同步、异步错误捕获 express try catch"
	},
	// express router
	"router express node": {
		"prefix": "router express node",
		"scope": "javascript",
		"body": [
			"const ${1:router} = express.Router();\n",
		],
		"description": "初始化路由对象 express.Router()"
	},
	"easy routerA express node": {
		"prefix": "easy routerA express node",
		"scope": "javascript",
		"body": [
			"const ${1:router} = require('$2/route/${1:router}');",
			"${3:app}.use('./${1:router1}', ${1:router1});\n"
		],
		"description": "模块化路由导入模板"
	},
	"easy routerB express node": {
		"prefix": "easy routerB express node",
		"scope": "javascript",
		"body": [
			"const express = require('express');",
			"const ${1:router1} = express.Router();",
			"${1:router1}.${2:get}('/${3:router2}', (req, res) => {",
			"\tres.send('$4ok')\n\t$5",
			"});\n",
			"module.exports = ${1:router1};\n"
		],
		"description": "模块化路由导出模板"
	},
	// util.promisify
	"wrapPromise promisify module node": {
		"prefix": "wrapPromise promisify module node",
		"scope": "javascript",
		"body": [
			"const $2${1:asyncApi} = promisify(${1:asyncApi});\n"
		],
		"description": "调用promisify() 把异步api包装成promise对象"
	},
}