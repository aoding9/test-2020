{
	// modules 引入
	"!require-module-node": {
		"prefix": "!require-module-node",
		"scope": "javascript",
		"body": [
			"const $0${1:modulename} = require('${1:modulename}');"
		],
		"description": "引入模块"
	},
	"!mongoose-module-node": {
		"prefix": "!mongoose-module-node",
		"scope": "javascript",
		"body": [
			"const mongoose = require('mongoose');"
		],
		"description": "mongoose 数据库模块"
	},
	"!http-module-node": {
		"prefix": "!http-module-node",
		"scope": "javascript",
		"body": [
			"const http = require('http');"
		],
		"description": "http 网站服务器模块"
	},
	"!url-module-node": {
		"prefix": "!url-module-node",
		"scope": "javascript",
		"body": [
			"const url = require('url');"
		],
		"description": "url url处理模块"
	},
	"!fs-module-node": {
		"prefix": "!fs-module-node",
		"scope": "javascript",
		"body": [
			"const fs = require('fs');"
		],
		"description": "fs 文件模块"
	},
	"!path-module-node": {
		"prefix": "!path-module-node",
		"scope": "javascript",
		"body": [
			"const path = require('path');"
		],
		"description": "path 路径处理模块"
	},
	"!gulp-module-node": {
		"prefix": "!gulp-module-node",
		"scope": "javascript",
		"body": [
			"const gulp = require('gulp');"
		],
		"description": "gulp 自动化项目重构模块"
	},
	"!fileinclude-module-node": {
		"prefix": ["!fileinclude-module-node","!gulp-file-include-module-node"],
		"scope": "javascript",
		"body": [
			"const fileinclude = require('gulp-file-include');"
		],
		"description": "gulp-file-include 自动化公共代码包含模块"
	},
	"!htmlmin-module-node": {
		"prefix": ["!htmlmin-module-node","!gulp-htmlmin-module-node"],
		"scope": "javascript",
		"body": [
			"const htmlmin = require('gulp-htmlmin');"
		],
		"description": "gulp-htmlmin html压缩模块"
	},
	"!less-module-node": {
		"prefix": ["!less-module-node","!gulp-less-module-node"],
		"scope": "javascript",
		"body": [
			"const less = require('gulp-less');"
		],
		"description": "gulp-less 自动化less转css模块"
	},
	"!csso-module-node": {
		"prefix": ["!csso-module-node","!gulp-csso-module-node"],
		"scope": "javascript",
		"body": [
			"const csso = require('gulp-csso');"
		],
		"description": "gulp-csso 自动化css压缩模块"
	},
	"!babel-module-node": {
		"prefix": ["!babel-module-node","!gulp-babel-module-node"],
		"scope": "javascript",
		"body": [
			"const babel = require('gulp-babel');"
		],
		"description": "gulp-babel 自动化es6转es5模块"
	},
	"!uglify-module-node": {
		"prefix": ["!uglify-module-node","!gulp-uglify-module-node"],
		"scope": "javascript",
		"body": [
			"const uglify = require('gulp-uglify');"
		],
		"description": "gulp-uglify 自动化js压缩模块"
	},
	"!querystring-module-node": {
		"prefix": "!querystring-module-node",
		"scope": "javascript",
		"body": [
			"const querystring = require('querystring');"
		],
		"description": "query字符串处理模块"
	},
	"!mime-module-node": {
		"prefix": "!mime-module-node",
		"scope": "javascript",
		"body": [
			"const querystring = require('querystring');"
		],
		"description": "mime类型处理模块"
	},
	"!art-template-module-node": {
		"prefix": "!art-template-module-node",
		"scope": "javascript",
		"body": [
			"const template = require('art-template');"
		],
		"description": "art-template模板引擎模块"
	},
	// http
	"!createServer-http-node": {
		"prefix": "!createServer-http-node",
		"scope": "javascript",
		"body": [
			"const ${1:app} = http.createServer();"
		],
		"description": "创建网站服务器实例对象"
	},
	"!request-http-node": {
		"prefix": "!request-http-node",
		"scope": "javascript",
		"body": [
			"${1:app}.on('request', (req, res) => {",
			"\t$2",
			"\tres.end(${3:'ok'});",
			"});"
		],
		"description": "服务器对象注册响应事件"
	},
	"!listen-http-node": {
		"prefix": "!listen-http-node",
		"scope": "javascript",
		"body": [
			"app.listen(${1:3000});",
			"console.log('服务器启动成功');"
		],
		"description": "服务器对象监听端口"
	},
	"!writeHead200-http-node": {
		"prefix": "!writeHead200-http-node",
		"scope": "javascript",
		"body": [
			"res.writeHead(200, {",
			"\t${1:'content-type': 'text/html;charset=utf8'},",
			"});",
			"res.end();"
		],
		"description": "报文头200响应"
	},
	"!writeHead301-http-node": {
		"prefix": "!writeHead301-http-node",
		"scope": "javascript",
		"body": [
			"res.writeHead(301, {",
			"\t${1:// Location: '/$2'},",
			"});",
			"res.end();"
		],
		"description": "报文头301响应"
	},
	"!writeHead400-http-node": {
		"prefix": "!writeHead400-http-node",
		"scope": "javascript",
		"body": [
			"res.writeHead(400, {",
			"\t${1:'content-type': 'text/html;charset=utf8'},",
			"});",
			"res.end('响应码：400');"
		],
		"description": "报文头400响应"
	},
	"!postParams-http-node": {
		"prefix": "!postParams-http-node",
		"scope": "javascript",
		"body": [
			"let postParams = '';",
   		"req.on('data', param => {",
      "\tpostParams += param;",
   		"});",
   		"req.on('end', () => {",
      "\t${1:const objParams = querystring.parse(postParams)}",
   		"});"
		],
		"description": "接收并拼接post参数"
	},
	"!method-http-node": {
		"prefix": "!method-http-node",
		"scope": "javascript",
		"body": [
			"if(req.method =='POST'){",
			"\t${1:res.end('is post')}",
			"}else if(req.method =='GET'){",
			"\t${2:res.end('is get')}",
			"} else {",
			"\t${3:res.end('not post or get')};",
			"}"
		],
		"description": "请求方式判断"
	},
	

	// fs
	"!readFile-fs-node": {
		"prefix": "!readFile-fs-node",
		"scope": "",
		"body": [
			"fs.readFile('${1:路径/文件名}','utf-8',(err, doc) => {",
			"\tif (err != null) {",
			"\t\tres.writeHead(400, {",
			"\t\t\t'content-type': 'text/html;charset=utf8'",
			"\t\t});",
			"\t\tconsole.log(err, '文件读取失败');",
			"\t} else {",
			"\t\tres.writeHead(200, {",
			"\t\t\t'content-type': '${2:type}'",
			"\t\t});",
			"\t\tres.end(doc);",
			"\t}",
			"});"
		],
		"description": "读取文件"
	},
	"!writeFile-fs-node": {
		"prefix": "!writeFile-fs-node",
		"scope": "javascript",
		"body": [
			"fs.writeFile('${1:路径/文件名}',${2:文件内容},err => {",
			"\tif (err != null) {",
			"\t\tconsole.log(err);",
			"\t} else {",
			"\t\tconsole.log('写入成功');",
			"\t}",
			"});"
		],
		"description": "写入文件"
	},
	// url
	"!parse-url-node": {
		"prefix": "!parse-url-node",
		"scope": "javascript",
		"body": [
			"let {query, pathname} = url.parse(req.url, true);",
			"pathname = pathname == '/'? '/${1:index.html}': pathname;",
			"if (pathname == '/index' || pathname == '/') {",
			"\tres.end('welcome to homepage')",
			"} else if (pathname == '/list') {",
			"\tres.end('welcome to listpage')",
			"} else {",
			"\tres.end('您访问的页面不存在')",
		 	"}",
		],
		"description": "简单路由以及获取get的参数对象query"
	},
	//path
	"!join-path-node": {
		"prefix": "!join-path-node",
		"scope": "javascript",
		"body": [
			"let realPath = path.join(${1:__dirname}, ${2:'public'}, ${3:pathname});",
		],
		"description": "路径拼接"
	},
	// mime
	"!getType-mime-node": {
		"prefix": "!getType-mime-node",
		"scope": "javascript",
		"body": [
		  "let type = mime.getType(realPath);"
		],
		"description": "获取文件类型"
	},
	// gulp
	"!gulp-htmlmin-node": {
		"prefix": "!gulp-htmlmin-node",
		"scope": "javascript",
		"body": [
			"const fileinclude = require('gulp-file-include');",
			"const htmlmin = require('gulp-htmlmin');",
			"gulp.task('htmlmin', done => {",
			"gulp.src(${1:'./src/*.html'})",
			"\t\t.pipe(fileinclude())",
			"\t\t.pipe(htmlmin({",
			"\t\t\tcollapseWhitespace: true",
			"\t\t}))",
			"\t\t.pipe(gulp.dest('${2:dist}'));",
			"\tdone();",
		"});"
		],
		"description": "gulp-htmlmin"
	},
	"!gulp-cssmin-node": {
		"prefix": "!gulp-cssmin-node",
		"scope": "javascript",
		"body": [
			"const less = require('gulp-less');",
			"const csso = require('gulp-csso');",
			"gulp.task('cssmin', done => {",
			"gulp.src([${1:'./src/css/*.less'}, ${2:'./src/css/*.css'}])",
			"\t\t.pipe(less())",
			"\t\t.pipe(csso())",
			"\t\t.pipe(gulp.dest('${2:dist/css}'));",
			"\tdone();",
		"});"
		],
		"description": "gulp-cssmin"
	},
	"!gulp-jsmin-node": {
		"prefix": "!gulp-jsmin-node",
		"scope": "javascript",
		"body": [
			"const babel = require('gulp-babel');",
			"const uglify = require('gulp-uglify');",
			"gulp.task('jsmin', done => {",
			"gulp.src(${1:'./src/js/*.js'})",
			"\t.pipe(babel({",
			"\t\tpresets: ['@babel/env']",
			"\t}))",
			"\t.pipe(uglify())",
			"\t.pipe(gulp.dest('${2:dist/js}'));",
			"\tdone();",
		"});"
		],
		"description": "gulp-jsmin"
	},
	"!gulp-copy-node": {
		"prefix": "!gulp-copy-node",
		"scope": "javascript",
		"body": [
			"gulp.task('copy', done => {",
			"gulp.src('./src/images/**/*').pipe(gulp.dest('dist/images'));",
			"gulp.src('./src/${1:其他需要复制的目录名}/**/*').pipe(gulp.dest('dist/${1:其他需要复制的目录名}'));",
			"\tdone();",
		"});"
		],
		"description": "gulp  copy"
	},
	"!gulp-default-node": {
		"prefix": "!gulp-default-node",
		"scope": "javascript",
		"body": [
			"gulp.task('default',gulp.series(['htmlmin','cssmin','jsmin','copy']));",
		],
		"description": "gulp-default"
	},
	// mongoose
	"!connect-mongoose-node": {
		"prefix": "!connect-mongoose-node",
		"scope": "javascript",
		"body": [
			"mongoose.connect('mongodb://${1:localhost/playground}' ,{",
			"\tuseNewUrlParser: true,",
			"\tuseUnifiedTopology: true",
			"})",
			"\t.then(() => console.log('数据库连接成功'))",
			"\t.catch(err => console.log(err, '数据库连接失败'));",
		],
		"description": "连接数据库"
	},

	"!then-mongoose-node": {
		"prefix": "!then-mongoose-node",
		"scope": "javascript",
		"body": [
			".then(doc => ${1:console.log(doc)})"
		],
		"description": "数据库连接正确的处理"
	},
	"!catch-mongoose-node": {
		"prefix": "!catch-mongoose-node",
		"scope": "javascript",
		"body": [
			".catch(err => {",
			"\tconst errors = err.errors;",
			"\tfor( let item in errors) {",
			"\t\tres.end(errors[item]['message']);",
			"\t}",
			"});"
		],
		"description": "数据库连接错误的处理"
	},

	"!schema-mongoose-node": {
		"prefix": "!schema-mongoose-node",
		"scope": "javascript",
		"body": [
			"const ${1:my}Schema = new mongoose.Schema({",
			"\t${2:key1}: {",
			"\t\ttype: ${3:String},",
			"\t},",
			"\t${4:key2}: {",
			"\t\ttype: ${5:String},",
			"\t},",
			"});",
			"const ${6:ColName} = mongoose.model('${6:ColName}', ${1:my}Schema);",
			"${6:ColName}.create({",
			"\t${2:key1}: ${7:value},",
			"\t${4:key2}: ${8:value},",
			"})",
			"\t.then(doc => console.log(doc))",
			"\t.catch(err => console.log(err));",
		],
		"description": "创建数据库模型，并编译模型"
	},
	"!validate-schema-mongoose-node": {
		"prefix": "!validate-schema-mongoose-node",
		"scope": "javascript",
		"body": [
			"validate: {",
			"\tvalidator: v => {",
			"\t\treturn ${1: 判断表达式  //true验证通过 false失败}",
			"\t},",
			"\tmessage: '${2:错误信息}'",
			"}",
		],
		"description": "schema模型数据自定义验证器"
	},
}