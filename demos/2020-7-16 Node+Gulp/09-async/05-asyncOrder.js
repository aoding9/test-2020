
// 异步api代码执行顺序
// （1）所有同步任务都在主线程上执行，行成一个执行栈
// （2）主线程之外，还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件
// （3）一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面还有哪些事件，那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行
// （4）主线程不断的重复上面的第三步


console.log('代码执行开始');  
// 异步api==>将异步api对应的事件加入异步任务队列，当主线程执行完毕，系统开始循环判断任务队列中的事件是否被触发，如果触发，就放到主线程执行对应任务
setTimeout(() => {console.log('2秒后执行的代码');},2000);  
setTimeout(() => {console.log('1秒后执行的代码');},1000);
console.log('代码执行结束==》异步api 代码没有被阻塞'); // ==>加入主线程



// 更多js同步异步相关 https://www.cnblogs.com/Yellow-ice/p/10433423.html